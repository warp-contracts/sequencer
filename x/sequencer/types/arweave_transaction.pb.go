// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sequencer/sequencer/arweave_transaction.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_warp_contracts_syncer_src_utils_arweave "github.com/warp-contracts/syncer/src/utils/arweave"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ArweaveTransaction struct {
	Transaction github_com_warp_contracts_syncer_src_utils_arweave.Transaction `protobuf:"bytes,2,opt,name=transaction,proto3,customtype=github.com/warp-contracts/syncer/src/utils/arweave.Transaction" json:"transaction"`
}

func (m *ArweaveTransaction) Reset()         { *m = ArweaveTransaction{} }
func (m *ArweaveTransaction) String() string { return proto.CompactTextString(m) }
func (*ArweaveTransaction) ProtoMessage()    {}
func (*ArweaveTransaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_dd4da2d627f8f6db, []int{0}
}
func (m *ArweaveTransaction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArweaveTransaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArweaveTransaction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArweaveTransaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArweaveTransaction.Merge(m, src)
}
func (m *ArweaveTransaction) XXX_Size() int {
	return m.Size()
}
func (m *ArweaveTransaction) XXX_DiscardUnknown() {
	xxx_messageInfo_ArweaveTransaction.DiscardUnknown(m)
}

var xxx_messageInfo_ArweaveTransaction proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ArweaveTransaction)(nil), "sequencer.sequencer.ArweaveTransaction")
}

func init() {
	proto.RegisterFile("sequencer/sequencer/arweave_transaction.proto", fileDescriptor_dd4da2d627f8f6db)
}

var fileDescriptor_dd4da2d627f8f6db = []byte{
	// 210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2d, 0x4e, 0x2d, 0x2c,
	0x4d, 0xcd, 0x4b, 0x4e, 0x2d, 0xd2, 0x47, 0xb0, 0x12, 0x8b, 0xca, 0x53, 0x13, 0xcb, 0x52, 0xe3,
	0x4b, 0x8a, 0x12, 0xf3, 0x8a, 0x13, 0x93, 0x4b, 0x32, 0xf3, 0xf3, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b,
	0xf2, 0x85, 0x84, 0xe1, 0x8a, 0xf4, 0xe0, 0x2c, 0x29, 0x91, 0xf4, 0xfc, 0xf4, 0x7c, 0xb0, 0xbc,
	0x3e, 0x88, 0x05, 0x51, 0xaa, 0x54, 0xc7, 0x25, 0xe4, 0x08, 0x31, 0x27, 0x04, 0x61, 0x8c, 0x50,
	0x06, 0x17, 0x37, 0x92, 0xa9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x3c, 0x4e, 0x6e, 0x27, 0xee, 0xc9,
	0x33, 0xdc, 0xba, 0x27, 0x6f, 0x97, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab,
	0x5f, 0x9e, 0x58, 0x54, 0xa0, 0x9b, 0x9c, 0x9f, 0x57, 0x52, 0x94, 0x98, 0x5c, 0x52, 0xac, 0x5f,
	0x5c, 0x09, 0x71, 0x63, 0x51, 0xb2, 0x7e, 0x69, 0x49, 0x66, 0x4e, 0x31, 0xcc, 0x8d, 0x7a, 0x48,
	0x86, 0x07, 0x21, 0x1b, 0xed, 0xe4, 0x7f, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f,
	0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c,
	0x51, 0xa6, 0x78, 0xac, 0x81, 0x87, 0x41, 0x05, 0x12, 0xbb, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89,
	0x0d, 0xec, 0x2f, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0e, 0x4d, 0xe4, 0x28, 0x33, 0x01,
	0x00, 0x00,
}

func (m *ArweaveTransaction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArweaveTransaction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArweaveTransaction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Transaction.Size()
		i -= size
		if _, err := m.Transaction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintArweaveTransaction(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func encodeVarintArweaveTransaction(dAtA []byte, offset int, v uint64) int {
	offset -= sovArweaveTransaction(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ArweaveTransaction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Transaction.Size()
	n += 1 + l + sovArweaveTransaction(uint64(l))
	return n
}

func sovArweaveTransaction(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozArweaveTransaction(x uint64) (n int) {
	return sovArweaveTransaction(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ArweaveTransaction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArweaveTransaction
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArweaveTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArweaveTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArweaveTransaction
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthArweaveTransaction
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthArweaveTransaction
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArweaveTransaction(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArweaveTransaction
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArweaveTransaction(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArweaveTransaction
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArweaveTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArweaveTransaction
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthArweaveTransaction
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupArweaveTransaction
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthArweaveTransaction
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthArweaveTransaction        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArweaveTransaction          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupArweaveTransaction = fmt.Errorf("proto: unexpected end of group")
)
