// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sequencer/sequencer/arweave_transaction_with_last_sort_key.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// L1 interaction with a sort key value from the previous interaction with the contract
type ArweaveTransactionWithLastSortKey struct {
	Transaction *ArweaveTransaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	LastSortKey string              `protobuf:"bytes,2,opt,name=last_sort_key,json=lastSortKey,proto3" json:"last_sort_key,omitempty"`
}

func (m *ArweaveTransactionWithLastSortKey) Reset()         { *m = ArweaveTransactionWithLastSortKey{} }
func (m *ArweaveTransactionWithLastSortKey) String() string { return proto.CompactTextString(m) }
func (*ArweaveTransactionWithLastSortKey) ProtoMessage()    {}
func (*ArweaveTransactionWithLastSortKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5cd2b3138c5a0dc, []int{0}
}
func (m *ArweaveTransactionWithLastSortKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArweaveTransactionWithLastSortKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArweaveTransactionWithLastSortKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArweaveTransactionWithLastSortKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArweaveTransactionWithLastSortKey.Merge(m, src)
}
func (m *ArweaveTransactionWithLastSortKey) XXX_Size() int {
	return m.Size()
}
func (m *ArweaveTransactionWithLastSortKey) XXX_DiscardUnknown() {
	xxx_messageInfo_ArweaveTransactionWithLastSortKey.DiscardUnknown(m)
}

var xxx_messageInfo_ArweaveTransactionWithLastSortKey proto.InternalMessageInfo

func (m *ArweaveTransactionWithLastSortKey) GetTransaction() *ArweaveTransaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *ArweaveTransactionWithLastSortKey) GetLastSortKey() string {
	if m != nil {
		return m.LastSortKey
	}
	return ""
}

func init() {
	proto.RegisterType((*ArweaveTransactionWithLastSortKey)(nil), "sequencer.sequencer.ArweaveTransactionWithLastSortKey")
}

func init() {
	proto.RegisterFile("sequencer/sequencer/arweave_transaction_with_last_sort_key.proto", fileDescriptor_f5cd2b3138c5a0dc)
}

var fileDescriptor_f5cd2b3138c5a0dc = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x72, 0x28, 0x4e, 0x2d, 0x2c,
	0x4d, 0xcd, 0x4b, 0x4e, 0x2d, 0xd2, 0x47, 0xb0, 0x12, 0x8b, 0xca, 0x53, 0x13, 0xcb, 0x52, 0xe3,
	0x4b, 0x8a, 0x12, 0xf3, 0x8a, 0x13, 0x93, 0x4b, 0x32, 0xf3, 0xf3, 0xe2, 0xcb, 0x33, 0x4b, 0x32,
	0xe2, 0x73, 0x12, 0x8b, 0x4b, 0xe2, 0x8b, 0xf3, 0x8b, 0x4a, 0xe2, 0xb3, 0x53, 0x2b, 0xf5, 0x0a,
	0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84, 0xe1, 0xfa, 0xf4, 0xe0, 0x2c, 0x29, 0x5d, 0x22, 0x8d, 0x85,
	0x98, 0xa1, 0x34, 0x89, 0x91, 0x4b, 0xd1, 0x11, 0x22, 0x1b, 0x82, 0x90, 0x0c, 0xcf, 0x2c, 0xc9,
	0xf0, 0x49, 0x2c, 0x2e, 0x09, 0xce, 0x2f, 0x2a, 0xf1, 0x4e, 0xad, 0x14, 0xf2, 0xe4, 0xe2, 0x46,
	0xd2, 0x2a, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x6d, 0xa4, 0xae, 0x87, 0xc5, 0x7e, 0x3d, 0x4c, 0xc3,
	0x82, 0x90, 0xf5, 0x0a, 0x29, 0x71, 0xf1, 0xa2, 0xf8, 0x45, 0x82, 0x49, 0x81, 0x51, 0x83, 0x33,
	0x88, 0x3b, 0x07, 0x61, 0x9d, 0x93, 0xff, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e,
	0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31,
	0x44, 0x99, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x97, 0x27, 0x16,
	0x15, 0xe8, 0x26, 0xe7, 0xe7, 0x95, 0x14, 0x25, 0x26, 0x97, 0x14, 0x23, 0xf9, 0xb6, 0x02, 0x89,
	0x5d, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0xf6, 0xac, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff,
	0x4d, 0x75, 0x56, 0xb1, 0x74, 0x01, 0x00, 0x00,
}

func (m *ArweaveTransactionWithLastSortKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArweaveTransactionWithLastSortKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArweaveTransactionWithLastSortKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LastSortKey) > 0 {
		i -= len(m.LastSortKey)
		copy(dAtA[i:], m.LastSortKey)
		i = encodeVarintArweaveTransactionWithLastSortKey(dAtA, i, uint64(len(m.LastSortKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArweaveTransactionWithLastSortKey(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintArweaveTransactionWithLastSortKey(dAtA []byte, offset int, v uint64) int {
	offset -= sovArweaveTransactionWithLastSortKey(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ArweaveTransactionWithLastSortKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovArweaveTransactionWithLastSortKey(uint64(l))
	}
	l = len(m.LastSortKey)
	if l > 0 {
		n += 1 + l + sovArweaveTransactionWithLastSortKey(uint64(l))
	}
	return n
}

func sovArweaveTransactionWithLastSortKey(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozArweaveTransactionWithLastSortKey(x uint64) (n int) {
	return sovArweaveTransactionWithLastSortKey(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ArweaveTransactionWithLastSortKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArweaveTransactionWithLastSortKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArweaveTransactionWithLastSortKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArweaveTransactionWithLastSortKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArweaveTransactionWithLastSortKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArweaveTransactionWithLastSortKey
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArweaveTransactionWithLastSortKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &ArweaveTransaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSortKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArweaveTransactionWithLastSortKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArweaveTransactionWithLastSortKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArweaveTransactionWithLastSortKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastSortKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArweaveTransactionWithLastSortKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArweaveTransactionWithLastSortKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArweaveTransactionWithLastSortKey(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArweaveTransactionWithLastSortKey
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArweaveTransactionWithLastSortKey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArweaveTransactionWithLastSortKey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthArweaveTransactionWithLastSortKey
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupArweaveTransactionWithLastSortKey
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthArweaveTransactionWithLastSortKey
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthArweaveTransactionWithLastSortKey        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArweaveTransactionWithLastSortKey          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupArweaveTransactionWithLastSortKey = fmt.Errorf("proto: unexpected end of group")
)
