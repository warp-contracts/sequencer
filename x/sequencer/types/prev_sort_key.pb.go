// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sequencer/sequencer/prev_sort_key.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PrevSortKey struct {
	Contract string `protobuf:"bytes,1,opt,name=contract,proto3" json:"contract,omitempty"`
	SortKey  string `protobuf:"bytes,2,opt,name=sortKey,proto3" json:"sortKey,omitempty"`
}

func (m *PrevSortKey) Reset()         { *m = PrevSortKey{} }
func (m *PrevSortKey) String() string { return proto.CompactTextString(m) }
func (*PrevSortKey) ProtoMessage()    {}
func (*PrevSortKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_c9bdb28cea1af9a4, []int{0}
}
func (m *PrevSortKey) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrevSortKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrevSortKey.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrevSortKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrevSortKey.Merge(m, src)
}
func (m *PrevSortKey) XXX_Size() int {
	return m.Size()
}
func (m *PrevSortKey) XXX_DiscardUnknown() {
	xxx_messageInfo_PrevSortKey.DiscardUnknown(m)
}

var xxx_messageInfo_PrevSortKey proto.InternalMessageInfo

func (m *PrevSortKey) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *PrevSortKey) GetSortKey() string {
	if m != nil {
		return m.SortKey
	}
	return ""
}

func init() {
	proto.RegisterType((*PrevSortKey)(nil), "sequencer.sequencer.PrevSortKey")
}

func init() {
	proto.RegisterFile("sequencer/sequencer/prev_sort_key.proto", fileDescriptor_c9bdb28cea1af9a4)
}

var fileDescriptor_c9bdb28cea1af9a4 = []byte{
	// 176 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2f, 0x4e, 0x2d, 0x2c,
	0x4d, 0xcd, 0x4b, 0x4e, 0x2d, 0xd2, 0x47, 0xb0, 0x0a, 0x8a, 0x52, 0xcb, 0xe2, 0x8b, 0xf3, 0x8b,
	0x4a, 0xe2, 0xb3, 0x53, 0x2b, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84, 0xe1, 0xd2, 0x7a,
	0x70, 0x96, 0x92, 0x33, 0x17, 0x77, 0x40, 0x51, 0x6a, 0x59, 0x70, 0x7e, 0x51, 0x89, 0x77, 0x6a,
	0xa5, 0x90, 0x14, 0x17, 0x47, 0x72, 0x7e, 0x5e, 0x49, 0x51, 0x62, 0x72, 0x89, 0x04, 0xa3, 0x02,
	0xa3, 0x06, 0x67, 0x10, 0x9c, 0x2f, 0x24, 0xc1, 0xc5, 0x5e, 0x0c, 0x51, 0x26, 0xc1, 0x04, 0x96,
	0x82, 0x71, 0x9d, 0xfc, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39,
	0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58, 0x8e, 0x21, 0xca, 0x34,
	0x3d, 0xb3, 0x24, 0xa3, 0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0xbf, 0x3c, 0xb1, 0xa8, 0x40, 0x17,
	0x66, 0x5a, 0x31, 0x92, 0x63, 0x2b, 0x90, 0xd8, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60,
	0x17, 0x1b, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x17, 0x10, 0x97, 0xae, 0xdc, 0x00, 0x00, 0x00,
}

func (m *PrevSortKey) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrevSortKey) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrevSortKey) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SortKey) > 0 {
		i -= len(m.SortKey)
		copy(dAtA[i:], m.SortKey)
		i = encodeVarintPrevSortKey(dAtA, i, uint64(len(m.SortKey)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintPrevSortKey(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPrevSortKey(dAtA []byte, offset int, v uint64) int {
	offset -= sovPrevSortKey(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PrevSortKey) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovPrevSortKey(uint64(l))
	}
	l = len(m.SortKey)
	if l > 0 {
		n += 1 + l + sovPrevSortKey(uint64(l))
	}
	return n
}

func sovPrevSortKey(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPrevSortKey(x uint64) (n int) {
	return sovPrevSortKey(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrevSortKey) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPrevSortKey
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrevSortKey: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrevSortKey: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrevSortKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrevSortKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrevSortKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SortKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPrevSortKey
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPrevSortKey
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPrevSortKey
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SortKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPrevSortKey(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPrevSortKey
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPrevSortKey(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPrevSortKey
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrevSortKey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPrevSortKey
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPrevSortKey
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPrevSortKey
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPrevSortKey
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPrevSortKey        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPrevSortKey          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPrevSortKey = fmt.Errorf("proto: unexpected end of group")
)
