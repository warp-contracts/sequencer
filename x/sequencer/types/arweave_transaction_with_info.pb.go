// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sequencer/sequencer/arweave_transaction_with_info.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// L1 interaction with a sort key value from the previous interaction with the contract
type ArweaveTransactionWithInfo struct {
	Transaction *ArweaveTransaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	LastSortKey string              `protobuf:"bytes,2,opt,name=last_sort_key,json=lastSortKey,proto3" json:"last_sort_key,omitempty"`
	Random      []byte              `protobuf:"bytes,3,opt,name=random,proto3" json:"random,omitempty"`
}

func (m *ArweaveTransactionWithInfo) Reset()         { *m = ArweaveTransactionWithInfo{} }
func (m *ArweaveTransactionWithInfo) String() string { return proto.CompactTextString(m) }
func (*ArweaveTransactionWithInfo) ProtoMessage()    {}
func (*ArweaveTransactionWithInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_4153d8a6a8367bf0, []int{0}
}
func (m *ArweaveTransactionWithInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArweaveTransactionWithInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArweaveTransactionWithInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArweaveTransactionWithInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArweaveTransactionWithInfo.Merge(m, src)
}
func (m *ArweaveTransactionWithInfo) XXX_Size() int {
	return m.Size()
}
func (m *ArweaveTransactionWithInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ArweaveTransactionWithInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ArweaveTransactionWithInfo proto.InternalMessageInfo

func (m *ArweaveTransactionWithInfo) GetTransaction() *ArweaveTransaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *ArweaveTransactionWithInfo) GetLastSortKey() string {
	if m != nil {
		return m.LastSortKey
	}
	return ""
}

func (m *ArweaveTransactionWithInfo) GetRandom() []byte {
	if m != nil {
		return m.Random
	}
	return nil
}

func init() {
	proto.RegisterType((*ArweaveTransactionWithInfo)(nil), "sequencer.sequencer.ArweaveTransactionWithInfo")
}

func init() {
	proto.RegisterFile("sequencer/sequencer/arweave_transaction_with_info.proto", fileDescriptor_4153d8a6a8367bf0)
}

var fileDescriptor_4153d8a6a8367bf0 = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x32, 0x2f, 0x4e, 0x2d, 0x2c,
	0x4d, 0xcd, 0x4b, 0x4e, 0x2d, 0xd2, 0x47, 0xb0, 0x12, 0x8b, 0xca, 0x53, 0x13, 0xcb, 0x52, 0xe3,
	0x4b, 0x8a, 0x12, 0xf3, 0x8a, 0x13, 0x93, 0x4b, 0x32, 0xf3, 0xf3, 0xe2, 0xcb, 0x33, 0x4b, 0x32,
	0xe2, 0x33, 0xf3, 0xd2, 0xf2, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x84, 0xe1, 0xca, 0xf5,
	0xe0, 0x2c, 0x29, 0x5d, 0x22, 0x4d, 0x83, 0x98, 0xa1, 0xb4, 0x98, 0x91, 0x4b, 0xca, 0x11, 0x22,
	0x1b, 0x82, 0x90, 0x0c, 0xcf, 0x2c, 0xc9, 0xf0, 0xcc, 0x4b, 0xcb, 0x17, 0xf2, 0xe4, 0xe2, 0x46,
	0xd2, 0x23, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x6d, 0xa4, 0xae, 0x87, 0xc5, 0x62, 0x3d, 0x4c, 0x53,
	0x82, 0x90, 0xf5, 0x0a, 0x29, 0x71, 0xf1, 0xe6, 0x24, 0x16, 0x97, 0xc4, 0x17, 0xe7, 0x17, 0x95,
	0xc4, 0x67, 0xa7, 0x56, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x06, 0x71, 0x83, 0x04, 0x83, 0xf3,
	0x8b, 0x4a, 0xbc, 0x53, 0x2b, 0x85, 0xc4, 0xb8, 0xd8, 0x8a, 0x12, 0xf3, 0x52, 0xf2, 0x73, 0x25,
	0x98, 0x15, 0x18, 0x35, 0x78, 0x82, 0xa0, 0x3c, 0x27, 0xff, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c,
	0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e,
	0x3c, 0x96, 0x63, 0x88, 0x32, 0x4d, 0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5,
	0x2f, 0x4f, 0x2c, 0x2a, 0xd0, 0x4d, 0xce, 0xcf, 0x2b, 0x29, 0x4a, 0x4c, 0x2e, 0x29, 0x46, 0xf2,
	0x7e, 0x05, 0x12, 0xbb, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d, 0xec, 0x7b, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xdf, 0x94, 0xec, 0xec, 0x7c, 0x01, 0x00, 0x00,
}

func (m *ArweaveTransactionWithInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArweaveTransactionWithInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArweaveTransactionWithInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Random) > 0 {
		i -= len(m.Random)
		copy(dAtA[i:], m.Random)
		i = encodeVarintArweaveTransactionWithInfo(dAtA, i, uint64(len(m.Random)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.LastSortKey) > 0 {
		i -= len(m.LastSortKey)
		copy(dAtA[i:], m.LastSortKey)
		i = encodeVarintArweaveTransactionWithInfo(dAtA, i, uint64(len(m.LastSortKey)))
		i--
		dAtA[i] = 0x12
	}
	if m.Transaction != nil {
		{
			size, err := m.Transaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintArweaveTransactionWithInfo(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintArweaveTransactionWithInfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovArweaveTransactionWithInfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ArweaveTransactionWithInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Transaction != nil {
		l = m.Transaction.Size()
		n += 1 + l + sovArweaveTransactionWithInfo(uint64(l))
	}
	l = len(m.LastSortKey)
	if l > 0 {
		n += 1 + l + sovArweaveTransactionWithInfo(uint64(l))
	}
	l = len(m.Random)
	if l > 0 {
		n += 1 + l + sovArweaveTransactionWithInfo(uint64(l))
	}
	return n
}

func sovArweaveTransactionWithInfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozArweaveTransactionWithInfo(x uint64) (n int) {
	return sovArweaveTransactionWithInfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ArweaveTransactionWithInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArweaveTransactionWithInfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArweaveTransactionWithInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArweaveTransactionWithInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArweaveTransactionWithInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthArweaveTransactionWithInfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthArweaveTransactionWithInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Transaction == nil {
				m.Transaction = &ArweaveTransaction{}
			}
			if err := m.Transaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSortKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArweaveTransactionWithInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArweaveTransactionWithInfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArweaveTransactionWithInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastSortKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Random", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArweaveTransactionWithInfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthArweaveTransactionWithInfo
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthArweaveTransactionWithInfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Random = append(m.Random[:0], dAtA[iNdEx:postIndex]...)
			if m.Random == nil {
				m.Random = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipArweaveTransactionWithInfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArweaveTransactionWithInfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArweaveTransactionWithInfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArweaveTransactionWithInfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArweaveTransactionWithInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArweaveTransactionWithInfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthArweaveTransactionWithInfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupArweaveTransactionWithInfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthArweaveTransactionWithInfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthArweaveTransactionWithInfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArweaveTransactionWithInfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupArweaveTransactionWithInfo = fmt.Errorf("proto: unexpected end of group")
)
