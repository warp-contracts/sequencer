// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sequencer/sequencer/next_arweave_block.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NextArweaveBlock struct {
	BlockInfo    *ArweaveBlockInfo     `protobuf:"bytes,1,opt,name=blockInfo,proto3" json:"blockInfo,omitempty"`
	Transactions []*ArweaveTransaction `protobuf:"bytes,2,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (m *NextArweaveBlock) Reset()         { *m = NextArweaveBlock{} }
func (m *NextArweaveBlock) String() string { return proto.CompactTextString(m) }
func (*NextArweaveBlock) ProtoMessage()    {}
func (*NextArweaveBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf042f23dd624dc, []int{0}
}
func (m *NextArweaveBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NextArweaveBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NextArweaveBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NextArweaveBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextArweaveBlock.Merge(m, src)
}
func (m *NextArweaveBlock) XXX_Size() int {
	return m.Size()
}
func (m *NextArweaveBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_NextArweaveBlock.DiscardUnknown(m)
}

var xxx_messageInfo_NextArweaveBlock proto.InternalMessageInfo

func (m *NextArweaveBlock) GetBlockInfo() *ArweaveBlockInfo {
	if m != nil {
		return m.BlockInfo
	}
	return nil
}

func (m *NextArweaveBlock) GetTransactions() []*ArweaveTransaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func init() {
	proto.RegisterType((*NextArweaveBlock)(nil), "sequencer.sequencer.NextArweaveBlock")
}

func init() {
	proto.RegisterFile("sequencer/sequencer/next_arweave_block.proto", fileDescriptor_fcf042f23dd624dc)
}

var fileDescriptor_fcf042f23dd624dc = []byte{
	// 237 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x29, 0x4e, 0x2d, 0x2c,
	0x4d, 0xcd, 0x4b, 0x4e, 0x2d, 0xd2, 0x47, 0xb0, 0xf2, 0x52, 0x2b, 0x4a, 0xe2, 0x13, 0x8b, 0xca,
	0x53, 0x13, 0xcb, 0x52, 0xe3, 0x93, 0x72, 0xf2, 0x93, 0xb3, 0xf5, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2,
	0x85, 0x84, 0xe1, 0x6a, 0xf4, 0xe0, 0x2c, 0x29, 0xac, 0x46, 0xa0, 0xe8, 0x8e, 0xcf, 0xcc, 0x4b,
	0xcb, 0x87, 0x18, 0x21, 0xa5, 0x8b, 0x4f, 0x75, 0x49, 0x51, 0x62, 0x5e, 0x71, 0x62, 0x72, 0x49,
	0x66, 0x7e, 0x1e, 0x44, 0xb9, 0xd2, 0x12, 0x46, 0x2e, 0x01, 0xbf, 0xd4, 0x8a, 0x12, 0x47, 0x88,
	0x0a, 0x27, 0x90, 0x71, 0x42, 0xce, 0x5c, 0x9c, 0x60, 0x73, 0x3d, 0xf3, 0xd2, 0xf2, 0x25, 0x18,
	0x15, 0x18, 0x35, 0xb8, 0x8d, 0x54, 0xf5, 0xb0, 0x38, 0x4d, 0x0f, 0x59, 0x17, 0x48, 0x71, 0x10,
	0x42, 0x9f, 0x90, 0x37, 0x17, 0x0f, 0x92, 0x75, 0xc5, 0x12, 0x4c, 0x0a, 0xcc, 0x1a, 0xdc, 0x46,
	0xea, 0xf8, 0xcc, 0x09, 0x41, 0xa8, 0x0f, 0x42, 0xd1, 0xec, 0xe4, 0x7f, 0xe2, 0x91, 0x1c, 0xe3,
	0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c,
	0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x51, 0xa6, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9,
	0xb9, 0xfa, 0xe5, 0x89, 0x45, 0x05, 0xba, 0xc9, 0xf9, 0x79, 0x25, 0x45, 0x89, 0xc9, 0x25, 0xc5,
	0x48, 0xfe, 0xaf, 0x40, 0x62, 0x97, 0x54, 0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0xbd, 0x6f, 0x0c,
	0x08, 0x00, 0x00, 0xff, 0xff, 0xc1, 0xef, 0xe2, 0xdc, 0xa0, 0x01, 0x00, 0x00,
}

func (m *NextArweaveBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NextArweaveBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NextArweaveBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Transactions) > 0 {
		for iNdEx := len(m.Transactions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transactions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNextArweaveBlock(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.BlockInfo != nil {
		{
			size, err := m.BlockInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNextArweaveBlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNextArweaveBlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovNextArweaveBlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NextArweaveBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockInfo != nil {
		l = m.BlockInfo.Size()
		n += 1 + l + sovNextArweaveBlock(uint64(l))
	}
	if len(m.Transactions) > 0 {
		for _, e := range m.Transactions {
			l = e.Size()
			n += 1 + l + sovNextArweaveBlock(uint64(l))
		}
	}
	return n
}

func sovNextArweaveBlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNextArweaveBlock(x uint64) (n int) {
	return sovNextArweaveBlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NextArweaveBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNextArweaveBlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NextArweaveBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NextArweaveBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNextArweaveBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNextArweaveBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNextArweaveBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockInfo == nil {
				m.BlockInfo = &ArweaveBlockInfo{}
			}
			if err := m.BlockInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transactions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNextArweaveBlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNextArweaveBlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNextArweaveBlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transactions = append(m.Transactions, &ArweaveTransaction{})
			if err := m.Transactions[len(m.Transactions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNextArweaveBlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNextArweaveBlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNextArweaveBlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNextArweaveBlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNextArweaveBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNextArweaveBlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNextArweaveBlock
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNextArweaveBlock
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNextArweaveBlock
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNextArweaveBlock        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNextArweaveBlock          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNextArweaveBlock = fmt.Errorf("proto: unexpected end of group")
)
